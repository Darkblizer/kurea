// Generated by CoffeeScript 1.6.3
var BotEvents, Database, EventEmitter, ModuleManager, Q, color, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

EventEmitter = require('events').EventEmitter;

_ = require('underscore');

_.str = require('underscore.string');

Database = require('nedb');

color = require('irc-colors');

Q = require('q');

BotEvents = require('./Bot').events;

ModuleManager = (function(_super) {
  __extends(ModuleManager, _super);

  ModuleManager.prototype.moduleActiveSettings = new Database({
    autoload: true,
    filename: 'data/bot-core/module-settings.kdb'
  });

  function ModuleManager(botManager) {
    this.botManager = botManager;
    this.handleMessage = __bind(this.handleMessage, this);
    this.disableModule = __bind(this.disableModule, this);
    this.enableModule = __bind(this.enableModule, this);
    this.getModuleActiveData = __bind(this.getModuleActiveData, this);
    this.isModuleActive = __bind(this.isModuleActive, this);
    this.findModuleByNameAndAliases = __bind(this.findModuleByNameAndAliases, this);
    this.botListeners = [];
    this.modules = require('./ModuleFinder').buildModuleList(this);
  }

  ModuleManager.prototype.findModuleByNameAndAliases = function(name) {
    var alias, compareNames, module, moduleName, possibleModule, _ref;
    name = name.toLowerCase();
    possibleModule = null;
    _ref = this.modules;
    for (moduleName in _ref) {
      module = _ref[moduleName];
      if (possibleModule !== null) {
        break;
      }
      compareNames = [module.shortName.toLowerCase()];
      for (alias in module.usage) {
        if (alias !== 'default') {
          compareNames.push(alias.toLowerCase());
        }
      }
      if (compareNames.indexOf(name !== -1)) {
        possibleModule = module;
      }
    }
    return possibleModule;
  };

  ModuleManager.prototype.isModuleActive = function(module, server, channel) {
    var deferred;
    deferred = Q.defer();
    this.moduleActiveSettings.find({
      name: module.shortName,
      server: server,
      channel: channel
    }, function(err, data) {
      console.log(module.shortName);
      if (module.shortName === 'Toggle' || (data !== [] && data.length === 1 && data[0].isEnabled)) {
        return deferred.resolve(true);
      } else {
        return deferred.reject(false);
      }
    });
    return deferred.promise;
  };

  ModuleManager.prototype.getModuleActiveData = function(module, server, channel, callback) {
    return this.moduleActiveSettings.find({
      name: module.shortName,
      server: server,
      channel: channel
    }, function(err, docs) {
      return callback(docs);
    });
  };

  ModuleManager.prototype.enableModule = function(module, server, channel) {
    this.moduleActiveSettings.update({
      name: module.shortName,
      server: server,
      channel: channel
    }, {
      $set: {
        isEnabled: true
      }
    }, {
      upsert: true
    });
    return "Module " + (color.bold(module.shortName)) + " is now " + (color.bold('enabled')) + " in " + channel + ".";
  };

  ModuleManager.prototype.disableModule = function(module, server, channel) {
    this.moduleActiveSettings.update({
      name: module.shortName,
      server: server,
      channel: channel
    }, {
      $set: {
        isEnabled: false
      }
    }, {
      upsert: true
    });
    return "Module " + (color.bold(module.shortName)) + " is now " + (color.bold('disabled')) + " in " + channel + ".";
  };

  ModuleManager.prototype.handleMessage = function(bot, from, to, message) {
    var command, commandPart, e, full, isChannel, match, matchRegex, module, moduleName, origin, route, serverName, targetNick, _ref, _results;
    matchRegex = /(?:(.+)[,:]\s+)?(.+)/;
    match = matchRegex.exec(message);
    if (match == null) {
      return;
    }
    full = match[0], targetNick = match[1], commandPart = match[2];
    if ((targetNick != null) && targetNick !== bot.getNick()) {
      return;
    }
    serverName = bot.conn.opt.server;
    isChannel = 0 === to.indexOf("#");
    _ref = this.modules;
    _results = [];
    for (moduleName in _ref) {
      module = _ref[moduleName];
      if (targetNick == null) {
        if (!_.str.startsWith(commandPart, module.commandPrefix)) {
          continue;
        }
        command = commandPart.substring(module.commandPrefix.length);
      } else {
        command = commandPart;
      }
      route = module.router.match(command.split('%').join('%25'));
      if (route != null) {
        origin = {
          bot: bot,
          user: from,
          channel: to === bot.getNick() ? void 0 : to,
          isPM: to === bot.getNick()
        };
        try {
          _results.push(this.isModuleActive(module, serverName, to).then(function() {
            return route.fn(origin, route);
          }));
        } catch (_error) {
          e = _error;
          console.error("Your module is bad and you should feel bad:");
          _results.push(console.error(e.stack));
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ModuleManager.prototype.addListener = function(event, listener) {
    return this.on(event, listener);
  };

  ModuleManager.prototype.on = function(event, listener) {
    var bot, _i, _len, _ref, _results,
      _this = this;
    if (__indexOf.call(BotEvents, event) >= 0) {
      _ref = this.botManager.bots;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bot = _ref[_i];
        _results.push((function(bot) {
          var listenerWrapper;
          listenerWrapper = function() {
            var args, e;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            try {
              return listener.apply(null, [bot].concat(__slice.call(args)));
            } catch (_error) {
              e = _error;
              console.error("Error in module bot listener");
              return console.error(e.stack);
            }
          };
          bot.conn.on(event, listenerWrapper);
          return _this.botListeners.push({
            event: event,
            listener: listener,
            wrapper: listenerWrapper,
            bot: bot
          });
        })(bot));
      }
      return _results;
    } else {
      return ModuleManager.__super__.on.call(this, event, listener);
    }
  };

  ModuleManager.prototype.once = function(event, listener) {
    var bot, self, _i, _len, _ref, _results,
      _this = this;
    if (__indexOf.call(BotEvents, event) >= 0) {
      self = this;
      _ref = this.botManager.bots;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bot = _ref[_i];
        _results.push((function(bot) {
          var listenerWrapper;
          listenerWrapper = function() {
            var args, e, index, _j, _len1;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            try {
              for (index = _j = 0, _len1 = botListeners.length; _j < _len1; index = ++_j) {
                e = botListeners[index];
                if (e.listenerWrapper === listenerWrapper) {
                  self.botListeners.splice(index, 1);
                }
              }
              return listener.apply(null, [bot].concat(__slice.call(args)));
            } catch (_error) {
              e = _error;
              console.error("Error in module bot listener");
              return console.error(e.stack);
            }
          };
          bot.conn.once(event, listenerWrapper);
          return _this.botListeners.push({
            event: event,
            listener: listener,
            wrapper: listenerWrapper,
            bot: bot
          });
        })(bot));
      }
      return _results;
    } else {
      return ModuleManager.__super__.once.call(this, event, listener);
    }
  };

  ModuleManager.prototype.removeListener = function(event, listener) {
    var e, index, _i, _ref, _results;
    if (__indexOf.call(BotEvents, event) >= 0) {
      _results = [];
      for (index = _i = _ref = this.botListeners.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; index = _ref <= 0 ? ++_i : --_i) {
        e = this.botListeners[index];
        if (e.event === event && e.listener === listener) {
          e.bot.conn.removeListener(event, e.wrapper);
          _results.push(this.botListeners.splice(index, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      return ModuleManager.__super__.removeListener.call(this, event, listener);
    }
  };

  ModuleManager.prototype.removeAllListeners = function(event) {
    var listener, _i, _len, _ref, _results;
    ModuleManager.__super__.removeAllListeners.call(this, event);
    _ref = this.botListeners[event];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      _results.push(removeListener(event, listener));
    }
    return _results;
  };

  ModuleManager.prototype.listeners = function(event) {
    var listener, listeners, _i, _len, _ref;
    listeners = ModuleManager.__super__.listeners.call(this, event);
    if (this.botListeners[event] != null) {
      _ref = this.botListeners[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        listeners.push(listener);
      }
    }
    return listeners;
  };

  return ModuleManager;

})(EventEmitter);

exports.ModuleManager = ModuleManager;
